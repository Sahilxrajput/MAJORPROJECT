<% layout("/layouts/boilerplate") %> 
<body>
  <div id="main-heading">
    <hi id="heading">Wonderlust</h1>
  </div>
  
  <div id="filters">
    <div class="filter">
        <div><i class="fa-solid fa-fire"></i></div>
        <p>Trending</p>
    </div>
    <div class="filter">
        <div><i class="ri-snowflake-line"></i></i></div>
        <p>Arctic</p>
    </div>
    <div class="filter">
        <div><i class="ri-ticket-2-line"></i></div>
        <p>Icons</p>
    </div>
    <div class="filter">
        <div><i class="fa-solid fa-golf-ball-tee"></i></div>
        <p>Golfing</p>
    </div>
    <div class="filter">
      <div><i class="fa-solid fa-igloo"></i></div>
      <p>Domes</p>
  </div>
  <div class="filter">
    <div><i  class="ri-cactus-line"></i></div>
    <p>Desert</p>
</div>
  <div class="filter">
      <div><i class="fa-solid fa-umbrella-beach"></i></div>
      <p>Beach</p>
  </div>
  <div class="filter">
    <div><i class="fa-solid fa-kitchen-set"></i></div>
    <p class="para">Chef's kitchens</p>
  </div>
  <div class="filter">
      <div><i class="fa-brands fa-fort-awesome"></i></div>
      <p class="para">Castles</p>
  </div>
  <div class="filter">
    <div><i class="fa-solid fa-key"></i></div>
    <p class="para">New</p>
  </div>
  <div class="filter">
    <div><i class="fa-solid fa-building"></i></div>
    <p class="para">Top Cities</p>
  </div>
  <div class="tax-toggle">
      <div class="form-check-reverse form-switch">
        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
        <label class="form-check-label" for="flexSwitchCheckDefault">Display total after taxes</label>
      </div>
  </div>
  </div>
    <div class="row row-cols-lg-3 row-cols-md-2 row-cols-sm-1 mt-3">
        <% for (const listing of allListings) {%>
            <a href="/listings/<%= listing._id%>" class="listing-link">
            <div class="lising-card card col mb-3" >
            <img src="<%=listing.image.url%>" class="card-img-top" alt="listing_image" style="height: 20rem;">
            <div class="card-img-overlay text-overlay"><%= listing.title %> </div>
            <div class="card-body para-body">
                <p class="card-text price-gst"><strong><p class="title-price"><%= listing.title %></p></strong><br>  
                <b>&#8377;<%= listing.price.toLocaleString("en-IN") %></b>/night 
                <i class="tax-info"> &nbsp; &nbsp; +18% GST</i>
              </p>
            </div>
          </div>
        </a>
          <% } %>
    </div>
</body>

<script>
  let taxSwitch = document.getElementById("flexSwitchCheckDefault");
  taxSwitch.addEventListener("click",() =>{
    let taxInfo = document.getElementsByClassName("tax-info");
    for(info of taxInfo) {
      if(info.style.display != "inline") {
      info.style.display = "inline"; 
    } else {
      info.style.display = "none"; 
    }
  }});
////////////Like effect//////////////////////
// const post = document.querySelector('.card-img-overlay');
// const heartIcon = document.querySelector('.like');

// let lastTap = 0;

// post.addEventListener('click', (event) => {
//     const currentTime = new Date().getTime();
//     const tapGap = currentTime - lastTap;

//     if (tapGap < 300 && tapGap > 0) {
//         // Double-tap detected
//         heartIcon.classList.add('activeLike');
        
//         setTimeout(() => {
//             heartIcon.classList.remove('activeLike');
//         }, 800); // Delay before the heart fades out
//     }

//     lastTap = currentTime;
// });

/////////////////scrolling animation///////////////
  document.addEventListener("DOMContentLoaded", function () {
    const elements = document.querySelectorAll(".card");

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add("show");
            } 
            // else {
            //     entry.target.classList.remove("show"); // Optional: Remove class when scrolled out
            // }
        });
    }, { threshold: 0.3 }); // Trigger when 50% of the element is visible

    elements.forEach(element => observer.observe(element));
});
</script>